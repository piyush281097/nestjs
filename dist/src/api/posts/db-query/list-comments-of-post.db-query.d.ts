export declare const listCommentsOfPostDbQuery = "\nWITH replies_for_comments as (\n    select 1                                                               as temp,\n           pc.id                                                           as comment_id,\n           pc.comment                                                      as comment,\n           pc.post_id                                                      as post_id,\n           pc.parent_comment_id                                            as parent_comment_id,\n           count(DISTINCT cl.id) FILTER (WHERE cl.id IS NOT NULL)::integer as likes,\n           case when cl2.id is not null then true else false end           as is_liked,\n           jsonb_build_object(\n                   'user_id', uc2.id,\n                   'user_handle', uc2.user_handle,\n                   'first_name', up2.first_name,\n                   'last_name', up2.last_name,\n                   'profile_image',        json_build_object('image_org', pm7.image_org,\n                                      'image_thumb', pm7.image_thumb,\n                                      'image_small', pm7.image_small,\n                                      'image_medium', pm7.image_medium,\n                                      'image_large', pm7.image_large)\n               )                                                           as created_by,\n           json_agg(\n           DISTINCT jsonb_build_object(\n                   'asset_id', ta.asset_id,\n                   'symbol', ma.symbol)\n               )\n           FILTER (WHERE ta.asset_id IS NOT NULL)                          AS tagged_assets,\n           json_agg(\n           DISTINCT jsonb_build_object(\n                   'user_id', uc.id,\n                   'user_handle', uc.user_handle,\n                   'first_name', up.first_name,\n                   'last_name', up.last_name)\n               )\n           FILTER (WHERE uc.id IS NOT NULL)                                AS tagged_users\n    from posts_comments pc\n             left join posts_comments pcc ON pc.id = pcc.parent_comment_id and pcc.is_deleted = FALSE\n             left join tagged_users tu on pc.id = tu.post_comment_id and tu.type = 'post_comment'\n             left join user_core uc on uc.id = tu.user_id\n             left join user_profile up on uc.id = up.user_id\n             left join user_core uc2 on uc2.id = pc.user_id\n             left join user_profile up2 on uc2.id = up2.user_id\n             LEFT JOIN profile_media pm7 ON pm7.user_id = uc2.id\n             left join tagged_assets ta on ta.post_comment_id = pc.id and ta.type = 'post_comment'\n             left join master_assets ma on ta.asset_id = ma.id\n             left join comment_likes cl on cl.post_comment_id = pc.id AND cl.is_deleted = FALSE\n             left join comment_likes cl2 on cl2.post_comment_id = pc.id AND cl2.is_deleted = FALSE AND cl2.user_id = $2\n    WHERE pc.is_deleted = FALSE\n      AND pc.post_id = $1\n      AND pc.parent_comment_id IS NOT NULL\n    group by pc.id, pc.comment, pc.parent_comment_id, uc2.id, uc2.user_handle, up2.first_name, up2.last_name, cl2.id, pm7.image_org,\n    pm7.image_large,\n    pm7.image_thumb,\n    pm7.image_small,\n    pm7.image_medium,\n    pm7.image_large\n    ORDER BY pc.last_updated DESC\n)\nselect pc.id                                                           as comment_id,\n       pc.comment                                                      as comment,\n       pc.post_id                                                      as post_id,\n       count(DISTINCT cl.id) FILTER (WHERE cl.id IS NOT NULL)::integer as likes,\n       case when cl2.id is not null then true else false end           as is_liked,\n       (\n           SELECT count(*)::integer\n           from replies_for_comments\n           where pc.id = replies_for_comments.parent_comment_id\n       )                                                               as replies_count,\n       (\n           SELECT json_agg(row_to_json(replies_for_comments))\n           from replies_for_comments\n           where pc.id = replies_for_comments.parent_comment_id\n           LIMIT 2\n       )                                                               as replies,\n       jsonb_build_object(\n               'user_id', uc2.id,\n               'user_handle', uc2.user_handle,\n               'first_name', up2.first_name,\n               'last_name', up2.last_name,\n               'profile_image',        json_build_object('image_org', pm5.image_org,\n                                      'image_thumb', pm5.image_thumb,\n                                      'image_small', pm5.image_small,\n                                      'image_medium', pm5.image_medium,\n                                      'image_large', pm5.image_large)\n           )                                                           as created_by,\n       json_agg(\n       DISTINCT jsonb_build_object(\n               'asset_id', ta.asset_id,\n               'symbol', ma.symbol)\n           )\n       FILTER (WHERE ta.asset_id IS NOT NULL)                          AS tagged_assets,\n       json_agg(\n       DISTINCT jsonb_build_object(\n               'user_id', uc.id,\n               'user_handle', uc.user_handle,\n               'first_name', up.first_name,\n               'last_name', up.last_name)\n           )\n       FILTER (WHERE uc.id IS NOT NULL)                                AS tagged_users\nfrom posts_comments pc\n         left join posts_comments pcc ON pc.id = pcc.parent_comment_id and pcc.is_deleted = FALSE\n         left join tagged_users tu on pc.id = tu.post_comment_id and tu.type = 'post_comment'\n         left join user_core uc on uc.id = tu.user_id\n         left join user_profile up on uc.id = up.user_id\n         left join user_core uc2 on uc2.id = pc.user_id\n         left join user_profile up2 on uc2.id = up2.user_id\n         LEFT JOIN profile_media pm5 ON pm5.user_id = uc2.id\n         left join tagged_assets ta on ta.post_comment_id = pc.id and ta.type = 'post_comment'\n         left join master_assets ma on ta.asset_id = ma.id\n         left join comment_likes cl on cl.post_comment_id = pc.id AND cl.is_deleted = FALSE\n         left join comment_likes cl2 on cl2.post_comment_id = pc.id AND cl2.is_deleted = FALSE AND cl2.user_id = $2\n         left join replies_for_comments on replies_for_comments.temp = 1\nWHERE pc.is_deleted = FALSE\n  AND pc.post_id = $1 \n  -- PARENT_COMMENT_ID\ngroup by pc.id, pc.comment, uc2.id, uc2.user_handle, up2.first_name, up2.last_name, cl2.id, pm5.image_org,\npm5.image_large,\npm5.image_thumb,\npm5.image_small,\npm5.image_medium,\npm5.image_large\nORDER BY pc.last_updated DESC\nLIMIT $3 OFFSET $4;\n";
